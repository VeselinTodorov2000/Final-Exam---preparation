// 3) Да се попълнят празните места в дефинициите на функциите така, че isOdd да връща истина
// тогава и само тогава, когато подаденото и число `
// е нечетно, а isEven — когато то е четно.

// bool isEven(unsigned int);
// bool isOdd(unsigned int n) {
// if (n == 0) return ________;
// if (n == 1) return ________;
// return isEven(________);
// }
// bool isEven(unsigned int n) {
// if (n == 0) return ________;
// if (n == 1) return ________;
// return isOdd(_________);
// }

isOdd: 0 -> false, 1 -> true, !(n % 2)
isEven: 0 -> true, 1 -> false, !(n % 2)


for (int i = 0; i < 9; ++i)
cout << (1 << i) << ";";

00000000000000000000000000000001 //1
"1;"
00000000000000000000000000000010 //2
"2;"
00000000000000000000000000000100 //4
"4;"
0, 8
"1;2;4;8;16;32;64;128;256;"

// 
switch(5 % 2) {
    case 0: std::cout << "0";
    case 1: std::cout << "1";
    default: std::cout << "x";
}

5%2=1 "1x"

for (int i = 0; i < 5; ++i) {
    if ( ! (i - 3))
    continue;
    std::cout << i;
}
//i=0 -> if(!(0-3)) => if(!(-3)) => if(0) => "0"
//i=1 -> if(!(1-3)) => if(!(-2)) => if(0) => "1"
//i=2 -> if(!(2-3)) => if(!(-1)) => if(0) => "2"
//i=3 -> if(!(3-3)) => if(!(0)) => if(1) =>
//i=4 -> if(!(4-3)) => if(!(1)) => if(0) => "4"
"0124"

// 
int arr[] = { 1, 2, 3, 4, 0 };
*(arr + 2) *= 10; // arr[] = { 1, 2, 30, 4, 0 };
for (int* p = arr; *p; p++)
std::cout << *p << ";";
// p = arr -> "1;"
// p = arr+1 -> "2;"
// p = arr+2 -> "30;"
// p = arr+3 -> "4;"
// p = arr+4 -> STOP
"1;2;30;4;"
